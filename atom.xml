<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matt's Blog]]></title>
  <link href="http://mschmaus201.github.io/atom.xml" rel="self"/>
  <link href="http://mschmaus201.github.io/"/>
  <updated>2013-08-22T09:50:41-04:00</updated>
  <id>http://mschmaus201.github.io/</id>
  <author>
    <name><![CDATA[Matt  Schmaus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[method_missing: do you know where your methods are?]]></title>
    <link href="http://mschmaus201.github.io/blog/2013/08/22/method-missing/"/>
    <updated>2013-08-22T09:29:00-04:00</updated>
    <id>http://mschmaus201.github.io/blog/2013/08/22/method-missing</id>
    <content type="html"><![CDATA[<p>This final week at the Flatiron School we had someone come so we can partake in mock interviews.  What an experience.   This was the first time I had gone through a technical interview, but I learned a lot more coming out of it than I thought I would!  Best lesson was learning about <em>method_missing</em> in Ruby.</p>

<h3>NoMethodError</h3>

<p>Naturally, when you call an undefined method on an object, we’re all used to receiving this error:</p>

<pre><code>NoMethodError: undefined method “#{method_name}” for "#{receiving_object_name}":“#{receiving_object_class}”  
</code></pre>

<p>But what exactly happens between the method being called and this error being raised?  If the current class does not contain the instance method being called, it checks if its parent class does.  If that class does not, it moves on up to that class’ parent class, all the way up until it reaches the outermost class: <em>BasicObject</em>.  <em>BasicObject</em> is the parent class for all classes in Ruby.  For more info on <em>BasicObject</em>, check out the Ruby docs <a href="http://www.ruby-doc.org/core-2.0/BasicObject.html">here</a>.  If that class does not contain the instance method called (which it most likely won’t because, by default, it’s a blank class), it will check the Kernel module.   If nothing comes up in the Kernel module, it will call <em>method_missing</em>.  By default, this is what raises <em>NoMethodError</em>, but of course Ruby graciously provides you the ability to override <em>method_missing</em>!</p>

<h3><em>method_missing</em></h3>

<p>In a way, <em>method_missing</em> is a safety net.  It provides you with a way to gracefully handle calling a method that doesn’t exist!</p>

<p>The prompt for my mock interview can be found <a href="https://gist.github.com/wengzilla/e83f221f64077b635047">here</a>.  I was asked to import a YAML file, and make the following string of methods on data return the relevant value in the YAML file:</p>

<pre><code>parse_object.product.first.sku  
</code></pre>

<p>This string of methods should be the equivalent of calling:</p>

<pre><code>parse_object[“product”].first[“sku”]  
</code></pre>

<p>This is where method missing kicks in! Rather than having to define a method for every possible key in the parse_object hash, you can abstract it all to the <em>method_missing</em> method.  By passing in as an argument the key you want to retrieve you can set the method as follows:</p>

<pre><code>def method_missing(key)  
    ShippingHash.new(@data[“#{key}”]  
end  
</code></pre>

<p>where <em>ShippingHash</em> is the class and <em>@data</em> is the instance variable (a hash) initialized upon creation of a new <em>ShippingHash</em> object. Below is the final code for the parsing program:</p>

<pre><code>require 'yaml'  

file = File.open("file_path/shipping.yaml")  
data = YAML::load(file)  

class ShippingHash  
    def initialize(hash)  
        @data = hash  
    end  

    def method_missing(key)  
        ShippingHash.new(@data["#{key}"])  
    end  

    def first  
        ShippingHash.new(@data[0])  
    end  
end  

parse_object = ShippingHash.new(data)
puts parse_object.product.first.sku.inspect  
</code></pre>

<p>Overwriting and using <em>method_missing</em>, which is considered metaprogramming, may seem like a great way to make your program more abstract, and use less code.  But it is naturally slow as it must first check the current class, and all parent classes for the method name called before running <em>method_missing</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lets Set Up ActionMailer]]></title>
    <link href="http://mschmaus201.github.io/blog/2013/08/06/lets-set-up-actionmailer/"/>
    <updated>2013-08-06T23:37:00-04:00</updated>
    <id>http://mschmaus201.github.io/blog/2013/08/06/lets-set-up-actionmailer</id>
    <content type="html"><![CDATA[<p>To begin setting up ActionMailer, first step is to run <em>rails g mailer gg_mailer</em> (I’m using &lsquo;gg_mailer&rsquo; as the name for my mailer class in this walk-through) in the terminal, and then bundle install.  This will create a two files for you:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;1. <em>setup_mail.rb</em> in config/initializers directory<br/>
&nbsp;&nbsp;&nbsp;&nbsp;2. <em>gg_mailer.rb</em> in app/mailers directory</p>

<h2><em>setup_mail.rb</em></h2>

<p>The first file to begin working with is the <em>setup_mail.rb</em> file where you will connect your email account to your rails app.  I&rsquo;ll be using GMail for this example.  The first step to set up this file is to establish the delivery method, SMTP, or simple mail transfer protocol.  SMTP is a protocol for sending emails between servers, and a large majority or mail servers use this protocol.  Next is to set up the SMTP settings.  First are the address, port, and domain for the mail server; for GMail you can use smtp.gmail.com, port 587, and gmail.com, respectively.  Then you include your username and password.  Next, you must establish what type of authentication is required – plain, login, or cram_md5.  You can use plain for GMail.  Using login will encode your password using Base64, and I don’t fully understand the mechanism of cram_md5, but according to the <a href="http://api.rubyonrails.org/classes/ActionMailer/Base.html">ActionMailer documentation</a>, it “combines a Challenge/Response mechanism to exchange information and a cryptographic Message Digest 5 algorithm to hash important information.”  Finally, you have to set the enable_starttls_auto value, which accepts a boolean value; for GMail set it to true.  This detects if your mail server uses STARTTLS (only available if your server uses SMTP), which encrypts the connection to an SSL or TSL connection rather than just a plain text connection.<br/>
This is what it should look like by the time you’re done with this step.</p>

<pre><code>ActionMailer::Base.delivery_method = :smtp
ActionMailer::Base.smtp_settings = {
    :address              =&gt; "smtp.gmail.com",
    :port                 =&gt; 587,
    :domain               =&gt; "gmail.com",
    :user_name            =&gt; "gitgallery",
    :password             =&gt; "you_wish",
    :authentication       =&gt; "plain",
    :enable_starttls_auto =&gt; true
} 
</code></pre>

<p>Just make sure to include this file in <em>.gitignore</em>!  Otherwise you&rsquo;ll be exposing your password to the world&hellip;</p>

<h2><em>gg_mailer.rb</em></h2>

<p>Next file you have to work with is <em>gg_mailer.rb</em> in the app/mailers directory.  Here, you can set your default address for emails to be sent to, and define a method for each type of email you’d like to be sent.  Below you’ll see a method which sends off a registration confirmation email when called.  The reason for passing user in as an argument and assigning it to the local variable <em>@user</em> is to allow it to be in scope when you create the email in the views/gg_mailer directory.  In here you can include an attachment with the following syntax:</p>

<pre><code>attachments["rails.png"] = File.read("#{Rails.root}/public/images/rails.png")  
</code></pre>

<p>Finally, the last line is what actually sends off the email (make sure it’s the last line of code!):</p>

<pre><code>mail(:to =&gt; @user.email, :subject =&gt; "Registration Confirmation")  
</code></pre>

<p>Here is an example of what the file should look like.</p>

<pre><code>class GgMailer &lt; ActionMailer::Base
    default from: "gitgallery@gmail.com"

    def registration_confirmation(user)
        @user = user
        # attachments["rails.png"] = File.read("#{Rails.root}/public/images/rails.png") #USE THIS IF YOU WANT TO INCLUDE ATTACHMENT
        mail(:to =&gt; @user.email, :subject =&gt; "Registration Confirmation")
    end

    def new_project(project, contributor)
        @project = project
        @contributor = contributor
        mail(:to =&gt; @contributor["email"], :subject =&gt; "A repo you contributed to was just made into a project on Git Gallery.")
    end
end
</code></pre>

<p>The final step to get ActionMailer working is simply to call the method you just wrote wherever you’d like in your program!  For the example I gave, I’m calling it in the user#update controller/action for various reasons, but essentially this method will only trigger when a user signs in for the first time and confirms their account info!</p>

<h2>development_mail_interceptor</h2>

<p>One additional step you can take is to include the development_mail_interceptor, using the gem “mail”.  The mail interceptor allows you to ensure that all outgoing emails from the designated account direct to an assigned email address, usually the same one that the messages are being sent from.  This is so that whenever you’re in development, testing your site/seeding your database/etc, you are not constantly sending emails to addresses that may be included in your testing environment.</p>

<p>So, for the mail interceptor, you want to create the file development_mail_interceptor.rb in the lib director.  In it, you want to have a class of <em>DevelopmentMailInterceptor</em>, and the class method of <em>delivering_email(message)</em>.  You can set the email subject and to address by declaring <em>message.subject</em> and <em>message.to</em>, respectively.  For the subject, it is recommended to include in there the email address in which the message is supposed to be sent to, and the message.to address should be sent to where you are sending from.</p>

<p>The final step for the mail interceptor is to require it in the <em>setup_mail.rb</em> file, and to call</p>

<pre><code>ActionMailer::Base.register_interceptor(DevelopmentMailInterceptor) if Rails.env.development?  
</code></pre>

<p>This is what the file should look like by the time you&rsquo;re done including the interceptor:</p>

<pre><code>require 'development_mail_interceptor'

ActionMailer::Base.delivery_method = :smtp
ActionMailer::Base.smtp_settings = {
    :address              =&gt; "smtp.gmail.com",
    :port                 =&gt; 587,
    :domain               =&gt; "gmail.com",
    :user_name            =&gt; "gitgallery",
    :password             =&gt; "you_wish",
    :authentication       =&gt; "plain",
    :enable_starttls_auto =&gt; true
}

ActionMailer::Base.register_interceptor(DevelopmentMailInterceptor) if Rails.env.development?
</code></pre>

<h2>View Files</h2>

<p>Last but not least is to actually create the view file for the email itself.  These files should be saved in the views/gg_mailer directory, with the same name as the method that is being called.  For example, the email file for a registration confirmation email (the method triggered for this is registration_confirmation) will be  registration_confirmation.html.erb.  You should also create a text file for those users who prefer text emails over html emails.<br/>
Best of luck setting up ActionMailer in your own Rails app! Resources I found incredibly helpful were the railscast as well as the documentation.</p>

<p>  Until next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhoneGap: Intro (Part 1)]]></title>
    <link href="http://mschmaus201.github.io/blog/2013/07/23/phonegap-intro-part-1/"/>
    <updated>2013-07-23T00:11:00-04:00</updated>
    <id>http://mschmaus201.github.io/blog/2013/07/23/phonegap-intro-part-1</id>
    <content type="html"><![CDATA[<p>This is the first of two posts relating to PhoneGap.  This post will be my introduction to PhoneGap, and the second post will be a walkthrough of building my first PhoneGap-based app.</p>

<h3>What is PhoneGap?</h3>

<p>PhoneGap is an open source framework used to allow you to easily build cross-platform mobile apps using HTML, CSS, and JavaScript.  More so, it allows you to natively interact with the phone, meaning it gives you access to a phone’s features including the accelerometer, GPS, compass, notification center, etc.  Without PhoneGap, a developer would most likely use Java and Objective-C to develop natively for Android and iOS, respectively.</p>

<h3>History</h3>

<p>To start off, its fascinating to go back into PhoneGap’s archives and read their blogs from back in the day when they first announced and released information on their framework!  I definitely recommend taking a look <a href="http://phonegap.com/blog/">here</a>.</p>

<p>PhoneGap was first announced in 2008 for the purpose of allowing native mobile app features available to mobile web apps, taking the logic of Adobe AIR, which allows web developers to build Windows and OSX applications.</p>

<h3>Set Up</h3>

<p>PhoneGap is built on open source software called Apache Cordova.  To build something with PhoneGap, you’ll be using the cordova command-line interface.</p>

<p>First step is to install Node.js<br/>
<img src="http://mschmaus201.github.io/images/node_js_installation.png"></p>

<p>Then, you must install cordova using: <em>sudo npm install -g cordova</em> in the terminal.  &ldquo;npm&rdquo; stands for node package manager,  which, if you could guess, is the packet manager for the Node JavaScript platform.  This is installed when you download Node.js.</p>

<p>To create a new project directory, you need to run <em>cordova create DirectoryName</em>.  This will create three subdirectories, including: <em>merges</em>, <em>plugins</em>, and <em>www</em>.  <br/>
<img src="http://mschmaus201.github.io/images/cordova_phonegap_directory.png"></p>

<p><em>platforms</em>, the additional directory pictured above is for the target platform(s) you&rsquo;d like to develop for &ndash; ie, iOS, Android, etc.</p>

<p>All subdirectories are empty except for the <em>www</em> directory, of which you can see the content in the image above. The <em>www</em> directory is where the application&rsquo;s home page lives.  And for each platform you create (I&rsquo;ll get into this in Part 2 of the post, but the command to add a platform (iOS for exampke) is <em>cordova platform add ios</em>), another <em>www</em> directory is created within the platform/ios/ directory path.</p>

<p>For my follow up post, I&rsquo;ll install the iOS SDK and create my first PhoneGap app!  Stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Scales]]></title>
    <link href="http://mschmaus201.github.io/blog/2013/07/09/rails-scales/"/>
    <updated>2013-07-09T00:51:00-04:00</updated>
    <id>http://mschmaus201.github.io/blog/2013/07/09/rails-scales</id>
    <content type="html"><![CDATA[<p>Although I just began learning about the magic and wonders of Ruby on Rails, I’ve heard for some time that Rails has issues with scalability once you reach a certain point.  But in reality, that’s all I’ve really ever heard – I’ve never been offered any details as to how or why this is the case.</p>

<h2>Popular Sites on Rails</h2>

<p>Before getting into the details, there are a number of very popular sites that are built using Ruby on Rails, including: GitHub, Groupon, Hulu, YellowPages, Basecamp, Shopify, and Airbnb.</p>

<h4>Twitter</h4>

<p>Twitter was launched using Rails back in 2006.  Beginning in 2008, rumors of Twitter dropping Rails surfaced in the news, but this didn’t actually occur until 2011 – switching to Lucene, a “full-featured text search engine library written entirely in Java.”  This transition took place the week after the tsunami hit in Japan, which led to nearly a doubling in the usage of Twitter.  The switch cut latency to a third.  BUT, that doesn’t mean that the scalability issues were related to Rails!</p>

<h2>The Problem with Rails</h2>

<p>So most of the issues that arise with Rails don’t directly have to do with the Rails framework itself, rather the interaction with the database.  For example, Rails encourages programmers to develop in a local environment in which you generally work with smaller data sizes, but once deployed, you may find that working with larger data sizes can introduce significant performance problems.  Additionally, because Rails separates you a good amount from SQL, many Rails developers get into this “SQL is bad” mindset, instead relying on ActiveRecord.  Of course, ActiveRecord makes so many things so easy, but it does have its own performance issues.</p>

<p>Turns out that ActiveRecord is the main culprit in scalability issues within Rails, specifically relating to the N+1 query issues!  Just for review, here’s an example of what the N+1 query issue is:</p>

<p>  Lets say you have 100 cars, each with four tires.  In order to query each tire position (lets say depending on where the tire is, it has a position number of 1-4) with ActiveRecord, you’d ultimately be querying all 100 cars, and then for each car, you query the tires.  That ultimately comes out to 101 queries – incredibly inefficient!  Ultimately, it is faster to issue one query with 100 results rather than issue 100 queries with one result.</p>

<h2>Avoiding N+1</h2>

<p>Luckily, this isn’t something you have to be stuck with.  ActiveRecord uses something called lazy loading, in which it only performs a certain task when necessary.   On the other side of the spectrum is eager, and over-eager loading.  For example (based on a post <a href="http://stackoverflow.com/questions/1299374/what-is-eager-loading">here</a>):</p>

<p>Imagine a page with rollover images like for menu items or navigation. There are three ways the image loading could work on this page:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;1. Eager &ndash; load every single image required before you render the page<br/>
&nbsp;&nbsp;&nbsp;&nbsp;2. Lazy &ndash; load only the displayed images on page load and load the others if/when they are required<br/>
&nbsp;&nbsp;&nbsp;&nbsp;3. Over-eager &ndash; load only the displayed images on page load. After the page has loaded preload the other images in the background in case you need them</p>

<p>Using eager loading helps minimize the number of queries.  Ideally, the above example with cars and tires would only come out to two queries, no matter how many cars there were.  Here is how one would use eager loading:</p>

<h3>N+1 query</h3>

<pre><code>&lt;% @cars = Car.all(@cars).each do |car| %&gt;
    &lt;p&gt;&lt;%= car.tire.position %&gt; &lt;/p&gt;
&lt;% end %&gt;  
</code></pre>

<h3>Eager loading</h3>

<pre><code>&lt;% @cars = Car.find(:all, :include=&gt;[:tire] %&gt;
&lt;% @cars.each do |car|%&gt;
    &lt;p&gt;&lt;%= car.tire.position %&gt;&lt;/p&gt;
&lt;% end %&gt;  
</code></pre>

<p>As mentioned before, this will generate at most two queries, no matter how many rows you have in the posts table.</p>

<h2>Detecting Performance Problems</h2>

<p>One of the most powerful plugins is the &ldquo;query_reviewer&rdquo; which automatically analyzes SQL code that ActiveRecord generates for potential problems. It rates a page&rsquo;s SQL usage into one of three categories &ndash; Ok, Warning, and Critical &ndash; attaches warnings to any queries in which one is needed, and displays an interactive summary to help you determine which queries are not absolutely necessary.  Here&rsquo;s a <a href="https://github.com/nesquena/query_reviewer">link</a> to the repo for the gem.</p>

<h2>Conclusion</h2>

<p>All in all, the scalability issues of Ruby on Rails can be overcome.  The framework allows you to spend less time building and more time planning the architecture and how to scale.  Don&rsquo;t let is scare you off from the elegance of the framework.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://mschmaus201.github.io/blog/2013/06/19/hello-world/"/>
    <updated>2013-06-19T19:08:00-04:00</updated>
    <id>http://mschmaus201.github.io/blog/2013/06/19/hello-world</id>
    <content type="html"><![CDATA[<h2>Hello World</h2>

<p>My name is Matt and this is my first blog post.  I find understanding why people are where they are today is incredibly valuable, so before I begin with the more technical posts, I&rsquo;d just like to introduce myself&hellip;</p>

<h3>Background</h3>

<h4>My First Computers</h4>

<p>Born in NYC and raised in New Jersey, my first interaction with computers began with the family&rsquo;s Windows 95-powered Gateway 2000.  I absolutely loved playing games on that thing &ndash; Skyroads (still play with that one when I&rsquo;m feeling nostalgic), Oregon Trail, Roller Coaster Tycoon, and Myst (I never really figured out what to do in that).  It took a few years of just playing on PC&rsquo;s to really appreciate what they can do.  It wasn&rsquo;t until we got two Dell towers for the house (one for the parents and one for the kids) that I really became obsessed.</p>

<p>Within a few months of getting these, newer and faster models had come out.  But unlike this new Mac I got a few months ago, all the parts were easily replaceable.  Of course my parents wouldn&rsquo;t let me touch their computer, so against my siblings&#8217; will, I opened ours up and began tinkering around.  I ordered a few extra RAM sticks, a new hard drive, and &ldquo;borrowed&rdquo; a friend&rsquo;s copy of Windows 2000.  And luckily, my closest friends were all into computers and technology (and of course video games) the same way I was.</p>

<p>Separate from computers, my dad instilled in me this curiosity and desire to build and fix things. I needed (and still do) to understand how things actually work. From building outdoor furniture (and refusing to read the instructions), to watching him and my grandfather work on their cars, to watching documentaries on TV on how things were made, I just couldn&rsquo;t imagine myself using something without understanding how it actually worked.  And if something broke, I would sit there for HOURS and get pissed off to no end until I figured out how to fix it.  More than anything else, that mindset applies to technology.</p>

<p>One of my favorites quotes about programming (can&rsquo;t remember where I read it) is &ldquo;developers are nothing if not compulsive problem solvers.&rdquo; By the time high school came around I knew exactly what I wanted to focus on.</p>

<h4>High School</h4>

<p>I was lucky to attend a magnet high school which offered a focus in computer science.  The school was divided into numerous vocational academies, and I enrolled in the Academy for Telecommunication and Computer Science.  Over the four years, I received a significant amount of exposure to Java, HTML, Cisco networking fundamentals (through their CCNA program), and a small amount of Oracle database design.</p>

<p>Unfortunately, as I&rsquo;ve found with most forms of formal education, computers didn&rsquo;t appear as exciting to me as they used to.  So as I finished high school my academic focus was directed towards business instead.  I still did always stay fascinated with technology, its evolution, and its revolutionary capabilities, but learning how it worked was put on the backburner (until now).</p>

<h4>College</h4>

<p>For college, I escaped the northeast and attended Washington University in St. Louis where I studied Economics and Entrepreneurship.  I found the former absolutely useless, but the allure of entrepreneurship had its&#8217; hold on me.</p>

<p>At the end of freshman year, two of my roommates and I purchased <a href="http://bearsbikes.com/">Bears&#8217; Bikes</a>, the campus bicycle rental business &ndash; what an experience!  For many things I learned in class, I was able to apply to the business.  But interestingly enough, most things I learned in the business I was able to apply to class.  From managing customers and our employees, to accounting, to marketing, what I appreciated most was being able to see direct results in the business based on our actions.  And as we grew the company, so did my enthusiasm for the company.</p>

<p>While working on various parts of the business, I would picture it in my mind as some object that I&rsquo;m taking apart, improving, and putting back together. If you were wondering, we successfully sold Bears&#8217; Bikes towards the end of our senior year. As much as I loved the experience, maintaining a fleet of 150+ bikes definitely turned me off from cycling for a little while.</p>

<h4>Post Graduation</h4>

<p>By senior year, I had developed another business idea and discussed working on it with a close high school friend (he went on to Stanford to continue studying computer science).  I don&rsquo;t plan to say much about the concept itself (because I haven&rsquo;t completely shut the door on revisiting some modification of the idea), but we decided to start the business that winter.  Long story short, after about a year and a half, we weren&rsquo;t able to keep up with our own deadlines we set, and other companies out in the Valley received millions in funding for VERY similar concepts.  We realized there was no way to keep up with them given the stage in development we were at.</p>

<p>Of course we were both incredibly disappointed, but we were also encouraged by the fact that companies with similar plans had received large amounts of funding.  It told us that we were heading down the right path, and successfully identified a need and opportunity.</p>

<h4>Revisiting My Roots</h4>

<p>Lesson learned for me though is the importance of being more self reliant.  I&rsquo;m now revisiting my roots and (re)learn programming.  I know that I will start another business of my own one day, and the way this world is going, computers will no doubt play an integral role.  So why rely on someone else to manage what I can learn myself?  That&rsquo;s why I am a student at Flatiron School today. And less than three weeks in, I can already tell this is one of the best decisions of my life.</p>

<p>My friend had explained to me that he wasn&rsquo;t a fan of one of his summer internships because he already knew everything he needed to do well.  At the time I didn&rsquo;t really understand why he said that.  I couldn&rsquo;t imagine the downside to actually being fully qualified for your job!  But it wasn&rsquo;t until studying here did I really understand what he was talking about.</p>

<p>More than ever, I now see how programming fits my need to understand how things work.  Working on econ problem sets in college, I would have no problem passing over a problem after a while if there was no hope in me figuring it out.  But with programming, I&rsquo;ve spent countless hours staying up at night trying to work out issues in a program, not willing to give up.  I feel like a kid again because this reminds me of my younger self, and I couldn&rsquo;t have asked for more.</p>

<p>Until next time!</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arduino the Ruby Way]]></title>
    <link href="http://mschmaus201.github.io/blog/2013/06/17/arduino-the-ruby-way/"/>
    <updated>2013-06-17T00:00:00-04:00</updated>
    <id>http://mschmaus201.github.io/blog/2013/06/17/arduino-the-ruby-way</id>
    <content type="html"><![CDATA[<h1>Arduino the Ruby Way</h1>

<h4><a href="https://speakerdeck.com/austinbv/arduino-the-ruby-way">Speakerdeck Slideshow</a></h4>

<h6>Ruby in Our World</h6>

<p>Over the past two weeks, I&rsquo;ve heard a lot about the origin of the Ruby language and Matz&rsquo;s reasoning.  (Paraphrasing) &ldquo;I didn&rsquo;t want to create a computer language that humans can understand, I wanted to create a human language that computers can understand.&rdquo;  And since beginning work with Ruby, my minimal exposure has opened my eyes to the world of possibilities with this language.  But not just the TRON-like world of software.  I&rsquo;m talking about our world as well.</p>

<p>There&rsquo;s this little thing out there called an Arduino.  What is that you ask?  I got my buddies at WIRED to right up a little <a href="http://www.wired.com/gadgetlab/2008/04/just-what-is-an/">post</a> about Arduinos (Arduinoes? Arduini?) for you.  But long story short, its a microcontroller that can be connected with a number of sensors) &ndash; including ultrasound, humidity, microphone, etc &ndash; that opens the gates and connects our world with the world of TRON.</p>

<p>So, I&rsquo;ve got a pop quiz for you.  What&rsquo;s better than the capabilities of an Arduino?  Hint: It starts with an &lsquo;r&rsquo; and rhymes with &ldquo;doobie.&rdquo;  Its an Arduino powered by Ruby, the &ldquo;computer language&rdquo; of our world.</p>

<h6>Arduino Capabilities</h6>

<p>What <del>can</del> can&rsquo;t you do with an Arduino?  Here are a few Arduino projects I&rsquo;ve found incredible creative/useful:</p>

<ol>
<li>Using a sensor to detect the moisture of the soil for your plant, a tweet will be sent out as soon as your plant needs to be watered.</li>
<li>Make a motion detector for various purposes (including automatically turning on and off lights)</li>
<li>If you don&rsquo;t have a thermostat, you can set it to turn on your A/C or heat depending on the indoor and outdoor temperature (indoor using a temperature sensor, and outdoor pulling the info from the internet)</li>
<li>Control an RC car using your phone (my personal favorite).</li>
</ol>


<h6>Using Ruby with an Arduino</h6>

<p>To begin using Ruby to program an Arduino, there will be a few gems to download that will help you out.  There&rsquo;s a link <a href="http://playground.arduino.cc/interfacing/ruby">here</a> which explains a number of gems.</p>

<ul>
<li>To start off, &ldquo;Dino&rdquo; will help you get up and running very quickly.  And of course, its an open source gem so its constantly being updated and improved.  &ldquo;Dino&rdquo; even creates the class Board to make working with your Arduino even easier!</li>
<li>&ldquo;SerialPort&rdquo; will allow you to read from the Arduino&rsquo;s serial port.  The serial port is the port that allows the Arduino to interact with other devices.</li>
<li>My personal favorite is the &ldquo;Arduino&rdquo; gem which allows you to prototype programs for your Arduino without having to burn them to the device.  That way, you can see on your computer how the program would work without having to deploy it!</li>
<li>This isn&rsquo;t a gem, but a class which I find fascinating.  The TxRx class allows your Arduino to connect to another Arduino and its serial port (and therefore all the info coming from any attached sensors).  I can&rsquo;t even begin to think the type of network you can build with a few of these things and what you can do with them&hellip;</li>
</ul>


<h6>Using Ruby with an Arduino</h6>

<p>So I&rsquo;ve just recently become familiar with the capabilities of an Arduino after another student in my class, Kristen Curtis, posted about it on her <a href="http://picodegallo.github.io/blog/2013/06/10/mentally-reframing-ruby-part-2/">blog</a>.  As I begin to learn more about Ruby, I absolutely plan to implement my new found skills on an Arduino and definitely will keep you posted here!</p>
]]></content>
  </entry>
  
</feed>
